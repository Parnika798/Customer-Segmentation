# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZfuCi7cB7zeKIWiHep_B9DBwHbaQXe3k
"""
# streamlit_app.py

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import joblib
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from imblearn.over_sampling import SMOTE

# Set Streamlit page config
st.set_page_config(page_title="Customer Analysis", layout="wide")





st.markdown("""
    <h1 style='text-align: right; color: #A64D79; font-size: 4rem; margin-bottom:0;'>
        Customer Behavior Uncovered:
    </h1>
    <h2 style='text-align: right; color: #A64D79; font-size: 3rem; margin-top:0;'>
        Trends You Can't Ignore
    </h2>
""", unsafe_allow_html=True)



# Load the data
df = pd.read_csv("ecommerce_customer_data.csv")


st.markdown("""
<div style="background-image: url('https://www.transparenttextures.com/patterns/cubes.png'); padding: 10px 20px; border-radius: 10px;">
    <h2 style="color: #88304E;">Understanding Customer Diversity</h2>
    <p style="color: #F7374F; font-size: 16px; font-family: 'Arial';">
    Analyzing age, gender, and location patterns to better understand our customer base.
    </p>
</div>
""", unsafe_allow_html=True)


# Create 3 columns
col1, col2, col3 = st.columns(3)

# --------- First Graph ----------
with col1:
    st.markdown(
    "<h3 style='color: #D95F59;'>Gender-wise Distribution</h3>", 
    unsafe_allow_html=True
    )
    fig1, ax1 = plt.subplots()
    gender_distribution = df['Gender'].value_counts().reset_index()
    gender_distribution.columns = ['Gender', 'Count']
    sns.barplot(x='Gender', y='Count', data=gender_distribution, palette='Blues', ax=ax1)
    ax1.set_xlabel("Gender")
    ax1.set_ylabel("Count")
    st.pyplot(fig1)

# --------- Second Graph ----------
with col2:
    st.markdown(
    "<h3 style='color: #D95F59;'>Location-wise Distribution</h3>", 
    unsafe_allow_html=True
    )
    fig2, ax2 = plt.subplots()
    location_distribution = df['Location'].value_counts().reset_index()
    location_distribution.columns = ['Location', 'Count']
    sns.barplot(x='Location', y='Count', data=location_distribution, palette='viridis', ax=ax2)
    ax2.set_xlabel("Location")
    ax2.set_ylabel("Count")
    plt.xticks(rotation=45, ha='right')
    st.pyplot(fig2)

# --------- Third Graph ----------
with col3:
    st.markdown(
    "<h3 style='color: #D95F59;'>Age-wise Distribution</h3>", 
    unsafe_allow_html=True
    )
    bins = [18, 21, 24, 27, 30, 33, 36]
    labels = ['18-20', '21-23', '24-26', '27-29', '30-32', '33-35']
    df['Age Group'] = pd.cut(df['Age'], bins=bins, labels=labels, right=False)
    fig3, ax3 = plt.subplots()
    age_group_distribution = df['Age Group'].value_counts().sort_index()
    sns.barplot(x=age_group_distribution.index, y=age_group_distribution.values, palette='coolwarm', ax=ax3)
    ax3.set_xlabel("Age Group")
    ax3.set_ylabel("Count")
    st.pyplot(fig3)



st.markdown("""
<div style="background-image: url('https://www.transparenttextures.com/patterns/cubes.png'); padding: 10px 20px; border-radius: 10px;">
    <h2 style="color: #88304E;">Customer Browsing and Engagement Trends</h2>
    <p style="color: #F7374F; font-size: 16px; font-family: 'Arial';">
    Exploring how customers interact with our platform through browsing behavior and engagement metrics.
    </p>
</div>
""", unsafe_allow_html=True)

st.markdown("""
<div style="background-image: url('https://www.transparenttextures.com/patterns/cubes.png'); padding: 10px 20px; border-radius: 10px;">
    <h2 style="color: #88304E;">Transactional Insights: Frequency and Preferences</h2>
    <p style="color: #F7374F; font-size: 16px; font-family: 'Arial';">
    Uncovering purchase habits, spending patterns, and product preferences across customers.
    </p>
</div>
""", unsafe_allow_html=True)





# Upload CSV file
uploaded_file = st.file_uploader("Upload E-commerce Customer CSV", type=["csv"])

if uploaded_file is not None:
    df = pd.read_csv(uploaded_file)
    st.subheader("üìÑ Preview of Uploaded Data")
    st.dataframe(df.head())

    # Define churn: 1 if Total_Purchases == 0, else 0
    df['Churn'] = df['Total_Purchases'].apply(lambda x: 1 if x == 0 else 0)

    # Encode categorical variables
    le = LabelEncoder()
    for col in ['Gender', 'Location', 'Device_Type']:
        df[col] = le.fit_transform(df[col])

    # Drop User_ID and Total_Purchases (since we're using it to define churn)
    df.drop(columns=['User_ID', 'Total_Purchases'], inplace=True)

    # Define features and target
    X = df.drop('Churn', axis=1)
    y = df['Churn']

    # Handle class imbalance
    smote = SMOTE(random_state=42)
    X_resampled, y_resampled = smote.fit_resample(X, y)

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(
        X_resampled, y_resampled, test_size=0.2, random_state=42, stratify=y_resampled)

    # Feature scaling
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Train Gradient Boosting Model
    model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
    model.fit(X_train, y_train)

    # Evaluate model
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    cm = confusion_matrix(y_test, y_pred)
    cr = classification_report(y_test, y_pred, output_dict=True)

    st.subheader("üìä Model Performance")
    st.metric("Accuracy", f"{acc:.2%}")

    st.write("### Confusion Matrix")
    cm_df = pd.DataFrame(cm, columns=['Predicted Not Churn', 'Predicted Churn'],
                         index=['Actual Not Churn', 'Actual Churn'])
    st.dataframe(cm_df)

    st.write("### Classification Report")
    st.dataframe(pd.DataFrame(cr).transpose())

    st.success("Model trained successfully. You can now upload new customer data for prediction.")

    # Optional: Add section to upload new customer data and predict churn
    st.markdown("---")
    st.subheader("üîç Predict Churn on New Data")
    
    st.markdown("---")
    st.subheader("üßæ Manual Churn Prediction")

    with st.form("churn_form"):
        gender_input = st.selectbox("Gender", options=le_dict['Gender'].classes_)
        location_input = st.selectbox("Location", options=le_dict['Location'].classes_)
        device_input = st.selectbox("Device Type", options=le_dict['Device_Type'].classes_)
        age = st.number_input("Age", min_value=10, max_value=100, value=30)
        browsing_time = st.number_input("Product Browsing Time (minutes)", min_value=0.0, step=1.0)
        pages_viewed = st.number_input("Total Pages Viewed", min_value=0, step=1)
        items_added = st.number_input("Items Added to Cart", min_value=0, step=1)

        submitted = st.form_submit_button("Predict Churn")

    if submitted:
        # Encode categorical features
        gender = le_dict['Gender'].transform([gender_input])[0]
        location = le_dict['Location'].transform([location_input])[0]
        device = le_dict['Device_Type'].transform([device_input])[0]

        input_array = np.array([[gender, age, location, device, browsing_time, pages_viewed, items_added]])
        input_scaled = scaler.transform(input_array)

        prob = model.predict_proba(input_scaled)[0][1]
        pred = model.predict(input_scaled)[0]

        st.markdown(f"### üîç Churn Prediction Result")
        st.metric("Churn Probability", f"{prob:.2%}")
        st.success("Prediction: Churn" if pred == 1 else "Prediction: Not Churn")


